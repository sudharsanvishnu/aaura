package com.arnpaytmallinone

import android.app.Activity
import android.content.Intent
import android.os.Bundle
import android.text.TextUtils
import android.util.Log
import android.widget.Toast
import com.facebook.react.bridge.*
import com.paytm.pgsdk.PaytmOrder
import com.paytm.pgsdk.PaytmPaymentTransactionCallback
import com.paytm.pgsdk.TransactionManager
import org.json.JSONException
import org.json.JSONObject
import java.util.*

class AllInOneSDKManagerModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaModule(reactContext), ActivityEventListener {
  private val REQ_CODE = 410
  private val ERROR_CODE = "0"
  private var promise: Promise? = null

  init {
    reactContext.addActivityEventListener(this);
  }

  override fun getName(): String {
    return "AllInOneSDKManager"
  }

  @ReactMethod
  fun startTransaction(orderId: String?, mid: String?, txnToken: String?, amount: String?, callbackUrl: String, isStaging: Boolean, restrictAppInvoke: Boolean, urlScheme: String, call: Promise) {
    if (TextUtils.isEmpty(orderId) || TextUtils.isEmpty(mid) || TextUtils.isEmpty(txnToken) || TextUtils.isEmpty(amount)) {
      if (TextUtils.isEmpty(txnToken)) {
        setResult("txnToken error", call)
        Toast.makeText(reactApplicationContext, "txnToken error", Toast.LENGTH_LONG).show()
      } else {
        setResult("Please enter all field", call)
        Toast.makeText(reactApplicationContext, "Please enter all field", Toast.LENGTH_LONG).show()
      }
      return
    }

    var callbackUri = callbackUrl
    promise = call

    var host = "https://securegw.paytm.in/"
    if (isStaging) {
      host = "https://securegw-stage.paytm.in/"
    }
    if (callbackUri.trim().isEmpty()) {
      callbackUri = host + "theia/paytmCallback?ORDER_ID=" + orderId
    }
    val paytmOrder = PaytmOrder(orderId, mid, txnToken, amount, callbackUri)
    val transactionManager = TransactionManager(paytmOrder, object : PaytmPaymentTransactionCallback {
      override fun onTransactionResponse(bundle: Bundle?) {
        Log.d("LOG", "Payment Transaction is successful $bundle")
        setResult(getData(bundle ?: Bundle.EMPTY), promise)

        Log.d("LOG", "Payment Transaction is successful $bundle")
        if (bundle?.getString("STATUS").equals("TXN_SUCCESS")) {
          setResult(getData(bundle ?: Bundle.EMPTY), call);
        } else {
          setResult((bundle?.getString("RESPMSG")) ?: "", call)
        }

        //Toast.makeText(getCurrentActivity(), "Payment Transaction response " + bundle.toString(), Toast.LENGTH_LONG).show();
      }

      override fun networkNotAvailable() {
        setResult("networkNotAvailable", promise)
      }

      override fun onErrorProceed(s: String?) {
        setResult(s ?: "onErrorProceed", promise)
      }

      override fun clientAuthenticationFailed(s: String?) {
        setResult(s ?: "clientAuthenticationFailed", promise)
      }

      override fun someUIErrorOccurred(s: String?) {
        setResult(s ?: "someUIErrorOccurred", promise)
      }

      override fun onErrorLoadingWebPage(iniErrorCode: Int, inErrorMessage: String?, inFailingUrl: String?) {
        setResult("${inErrorMessage ?: "onErrorLoadingWebPage"}, url: $inFailingUrl", promise)
      }

      override fun onBackPressedCancelTransaction() {
        setResult("onBackPressedCancelTransaction", promise)
      }

      override fun onTransactionCancel(s: String?, bundle: Bundle?) {
        if (bundle != null) {
          if (bundle.get("STATUS")?.equals("TXN_SUCCESS") == true) {
            setResult(getData(bundle), promise)
          } else {
            setResult(bundle.getString("RESPMSG") ?: "", call);
          }
        } else {
          setResult(s ?: "onTransactionCancel", call);
        }
      }
    })
    transactionManager.callingBridge =  "ReactNative"

    if(restrictAppInvoke){
      transactionManager.setAppInvokeEnabled(false)
    }

    transactionManager.setShowPaymentUrl(host + "theia/api/v1/showPaymentPage")
    transactionManager.startTransaction(Objects.requireNonNull(currentActivity), REQ_CODE)
  }

  override
  fun onActivityResult(activity: Activity?, requestCode: Int, resultCode: Int, data: Intent?) {
    if (requestCode == REQ_CODE) {
      if (data != null) {
        val message: String = data.getStringExtra("nativeSdkForMerchantMessage") ?: ""
        val response: String = data.getStringExtra("response") ?: ""

        handleResponse(response, message)
      } else {
        setResult("unknown error", promise)
      }
    }
  }

  override
  fun onNewIntent(intent: Intent?) {}


  private fun handleResponse(response: String, errorMsg: String) {
    when {
      response.isNotEmpty() -> {
        try {
          val resultJson = JSONObject(response)
          if (resultJson.getString("STATUS") == "TXN_SUCCESS") {
            setResult(getData(resultJson), promise)
          } else {
            setResult(resultJson.getString("RESPMSG"), promise);
          }
          //setResult(getData(data.extras?: Bundle.EMPTY), promise)
        } catch (e: Exception) {
          setResult(e.message ?: "format error", promise)
        }
      }
      errorMsg.isNotEmpty() -> {
        setResult(errorMsg, promise)
      }
      else -> {
        setResult("unexpected error", promise)
      }
    }
  }

  private fun setResult(message: String, call: Promise?) {
    call?.reject(ERROR_CODE, message)
  }

  private fun setResult(data: WritableMap, call: Promise?) {
    call?.let {
      try {
        call.resolve(data)
      } catch (e: JSONException) {
        call.reject(ERROR_CODE, e.message)
      }
    }
  }

  private fun getData(bundle: Bundle): WritableMap {
    val data = Arguments.createMap()
    for (key in bundle.keySet()) {
      data.putString(key, bundle.getString(key, ""))
    }
    return data
  }

  private fun getData(json: JSONObject): WritableMap {
    val data = Arguments.createMap()
    for (key in json.keys()) {
      data.putString(key, json.getString(key))
    }
    return data
  }

}
